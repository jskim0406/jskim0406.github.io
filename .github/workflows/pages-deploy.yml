name: "Build and Deploy"

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - .gitignore
      - README.md
      - LICENSE

  # Actions 탭에서 수동으로 이 워크플로우를 실행할 수 있도록 설정
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# 한 번에 하나의 배포만 진행되도록 설정
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'  # 명시적으로 3.3.0 버전 지정
          bundler-cache: true

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Build site
        run: bundle exec jekyll build -d "_site"
        env:
          JEKYLL_ENV: "production"

      - name: Test site
        run: |
          bundle exec htmlproofer _site \
            --disable-external=true \
            --ignore-urls "/^http:\/\/127.0.0.1/,/^http:\/\/0.0.0.0/,/^http:\/\/localhost/"

      # 여기서 pages용이 아닌 일반 actions/upload-artifact@v4를 사용
      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          # 아래 deploy 단계의 artifact_name과 일치해야 함
          name: github-pages
          path: "_site"

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    environment:
      name: github-pages
      # 배포 후에만 URL 출력이 가능. 필요하면 아래처럼 사용 가능.
      # url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          # build 단계에서 업로드한 아티팩트 이름과 일치
          artifact_name: github-pages
          # ephemeral을 false로 설정해 표준 아티팩트에서 배포하도록 지정
          ephemeral: false
